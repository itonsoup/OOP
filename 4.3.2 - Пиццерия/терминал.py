# Программирование на языке высокого уровня (Python).
# Задание №______. Вариант !!!
#
# Выполнил: Фамилия И.О.
# Группа: !!!
# E-mail: !!!
from заказ import Заказ
from пицца import Пицца
from пицца import ПиццаПепперони, ПиццаБарбекю, ПиццаДарыМоря


# Уберите raise и добавьте необходимый код - импортируйте необходимые модули


class Терминал:
    """Класс Терминал обеспечивает взаимодействие с клиентом."""

    КОМПАНИЯ = "Пиццерия №1"
    КОМАНДА_ОТМЕНА_ЗАКАЗА = -1
    КОМАНДА_ПОДТВЕРЖДЕНИЕ_ЗАКАЗА = 0

    def __init__(self):
        """Конструктор класса.

        self.меню: список доступных пицц;
        self.заказ: список заказанных пицц;
        self.отображать_меню: определяет отображение меню
                              равен True: при создании терминала,
                              после отмены или подтверждения заказа.
        """
        # Доступные пиццы
        self.меню = [ПиццаПепперони(), ПиццаБарбекю(), ПиццаДарыМоря()]
        self.заказ = None
        self.отображать_меню = True

    def __str__(self):
        """Вернуть строковое представление класса.

        Формат вывода:

        Имя пиццерии, версия программы.
        """

        return (self.КОМПАНИЯ + "\nДобро подаловать!\n")

    def показать_меню(self):
        """Показать меню.

        Показать меню следует только при наличии флага self.отображать_меню
        self.отображать_меню устанавливается в False после вывода меню.

        Формат вывода:

        Пиццерия #1
        Добро пожаловать!

        Меню:
        1. Пицца: Пепперони | Цена: 350.00 р.
           Тесто: тонкое Соус: томатный
           Начинка: пепперони, сыр моцарелла
        2. Пицца: Барбекю | Цена: 450.00 р.
           Тесто: тонкое Соус: барбекю
           Начинка: бекон, ветчина, зелень, сыр моцарелла
        3. Пицца: Дары моря | Цена: 550.00 р.
           Тесто: пышное Соус: тар-тар
           Начинка: кальмары, креветки, мидии, сыр моцарелла
        Для выбора укажите цифру через <ENTER>.
        Для отмены заказа введите -1
        Для подтверждения заказа введите 0
        """
        if not self.отображать_меню:
            return

        print("Меню: ")
        for i in range(len(self.меню)):
            print(str(i + 1) + ".  " + str(self.меню[i]))
        print("Для выбора укажите цифру через <ENTER>. \nДля отмены заказа введите -1 \nДля подтверждения заказа "
              "введите 0")

        self.отображать_меню = False

    def обработать_команду(self, пункт_меню):
        """Обработать действие пользователя.

        Аргументы:
          - пункт_меню (str): выбор пользователя.

        Возможные значения "пункт_меню":
          - -1: отменить заказ;
          -  0: подтвердить заказ; при этом осуществляется
                выставление счета, оплата, а также выполняется заказ;
                после заказ удаляется (= None)
          - 1..len(self.меню): добавление пиццы к добавить_к_заказу;
                               если заказ не создан, его нужно создать.
          - иначе: сообщить о невозможности обработать команду.

        Каждое действие подтверждается выводом на экран, например:
        1
        Пицца Пепперони добавлена!
        2
        Пицца Барбекю добавлена!
        0
        Заказ подтвержен.
        """
        ПОДТВЕРЖДЕНИЕ = False
        if ПОДТВЕРЖДЕНИЕ == False:
            try:
                пункт_меню = int(пункт_меню)
                if пункт_меню == Терминал.КОМАНДА_ОТМЕНА_ЗАКАЗА:

                    self.заказ.заказанные_пиццы = []
                    print("Заказ успешно отменен!")

                    # Проверьте, что отмена вызывается для созданного заказа
                elif пункт_меню == Терминал.КОМАНДА_ПОДТВЕРЖДЕНИЕ_ЗАКАЗА:
                   # При попытке подтвердить пустой заказ выдается исключение
                   # о невозможности подтвердить пустой заказ
                    if self.заказ.заказанные_пиццы == [] :
                        raise error
                    print("Заказ подтверждён")
                    print(f"Заказ №{Заказ.счетчик_заказов}")
                    for i in range(len(self.заказ.заказанные_пиццы)):
                        print(str(i + 1) + ".  " + str(self.заказ.заказанные_пиццы[i]))
                    print(f"Сумма заказа: {self.заказ.сумма()} р.")
                    ПОДТВЕРЖДЕНИЕ = True
                    self.принять_оплату()
                    # Уберите raise и добавьте необходимый код
                    # Проверьте, что подтверждение вызывается для созданного заказа
                    # При возникновении ошибки необходимо вызвать команду
                    # отмены заказа
                elif 1 <= пункт_меню <= len(self.меню):
                    if self.заказ is None:
                        self.заказ = Заказ()
                    пицца = self.меню[пункт_меню - 1]
                    self.заказ.добавить(пицца)
                    print(f"Пицца {self.меню[пункт_меню - 1].название} добавлена!")
                    # Если заказ не создан, его нужно предварительно создать

                else:
                    # За границей меню передаем управление в обработку исключений
                    raise ValueError
            except Exception as error:
                print("Нельзя подтверждать пустой заказ! Выберите пиццу из меню.")
            except ValueError:
                print("Не могу распознать команду! Проверьте ввод.")
            except Exception as e:
                print("Ошибка в работе терминала, введите корректную команду")

    def рассчитать_сдачу(self, оплата):
        """Вернуть сдачу для 'оплата'.

        Если оплата меньше стоимости заказа, возбудить исключение ValueError.
        """

        сумма_оплаты = int(оплата)
        if сумма_оплаты >= self.заказ.сумма():
            сдача = сумма_оплаты - self.заказ.сумма()
            return сдача
        else:
            print('Недостаточно средств.')
            return self.принять_оплату()
            # raise ValueError('Недостаточно средств.')

        # Уберите raise и добавьте необходимый код

    def принять_оплату(self):
        """Обработать оплату.

        Эмулирует оплату заказа (клиент вводит сумму с клавиатуры).

        Если сумма оплаты недостаточна (определяет метод рассчитать_сдачу())
        или возникает другая ошибка - исключние передается выше.
        """

        try:
            сумма_оплаты = input('Введите сумму: ')

            сдача = int(self.рассчитать_сдачу(сумма_оплаты))
            if сдача >= 0:
                print(f"Вы внесли {сумма_оплаты} р. Сдача: {сдача} р.\n")
                self.заказ.выполнить()
                self.обработать_команду()
        except Exception as e:
            print("\n")

